Linked lists do not provide constant time access. They may also involve recursion.

It is very important in an interview to know if the linked list you are working with 
is singly linked or doubly linked.

Below is some sample code that implements a simple Linked list.

class Node {
	Node next = null;
	int data;

	public Node(int d) {
		data = d;
	}

	void appendToTail(int d) {
		Node end = new Node(d);
		node n = this;
		while (n.next != null) {
			n = n.next;
		}
		n.next = end;
	}
}

When deleting a node from a linked list it is very important to check for nulls and
to update the head or tail pointers as needed.

Below is some sample code for deleting an element from a singly linked list.

Node deleteNode(Node head, int d) {
	Node n = head;

	// No null check, assume there is at least one element in list
	if (n.data == d) {
		return head.next /* Advance head, removing the element it points to */
	}

	while (n.next != null) {
		if (n.next.data == d) {
			n.next = n.next.next
			return head; /* Head did not change in this scenario */
		}
		n = n.next;
	}

	// Did not find the element to be removed
	return head;
}

The Runner Technique 
- A technique where you iterate through the LinkedList with two pointers
- One of the pointers moves faster than the other

Recursive Problems
- Many linked list problems rely on recursion
- All recursive algorithms take at least O(n) space where n is the depth of the recursive call
- All recursive algorithms can be implemented iterativly although they may be more complex